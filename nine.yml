AWSTemplateFormatVersion: "2010-09-09"
Description: Static contents distribution using S3 and CloudFront.
Parameters:
  CanonicalName:
    Description: Your Domain Name (CNAME).
    Type: String
    AllowedPattern: .+
    ConstraintDescription: Provide the CNAME (www.vinaysingh.online).
  DomainName:
    Type: String
    Default: vinaysingh.online
    Description: The website domain name.
  HostedDnsZoneId:
    Type: String
    Default: Z072183422PFI6FWLW2DC
    Description: Route53 hosted Zone ID
  AssetsBucketName:
    Type: String
    Default: static-hosting-demo30
    Description: S3 Bucket Name

# S3 bucket contains static contents
Resources:
  AssetsBucketS3:
    Type: AWS::S3::Bucket   
    Properties:
      BucketName:
        Ref: AssetsBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

# Origin Access Control for CloudFront
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: "origin access control(OAC) for allowing cloudfront to access S3 bucket"
        Name: static-hosting-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

# Create ACM certificate
  certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: vinaysingh.online
      DomainValidationOptions:
        - DomainName: vinaysingh.online
          HostedZoneId: !Ref HostedDnsZoneId
      ValidationMethod: DNS

# CloudFront Distribution for contents delivery
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - AssetsBucketS3
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: 
              Fn::Sub: "${AssetsBucketS3}.s3.amazonaws.com"
            Id: static-hosting
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        Enabled: "true"
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        HttpVersion: http2
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          Compress: true
          TargetOriginId: static-hosting
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
  
#S3 bucket policy to allow access from CloudFront OAC
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetsBucketS3
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${AssetsBucketS3}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
          - Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub arn:aws:s3:::${AssetsBucketS3}/*
              - !GetAtt AssetsBucketS3.Arn
            Condition:
              Bool:
                aws:SecureTransport: false
# Add Automatic entry to DNS record
  DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedDnsZoneId
      RecordSets:
        - Name: !Ref DomainName
          Type: A
          AliasTarget: 
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt  CloudFrontDistribution.DomainName
Outputs:
  URL:
     Value: !Join [ "", [ "https://", !GetAtt CloudFrontDistribution.DomainName ]]